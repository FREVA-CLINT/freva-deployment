---
- hosts: vault
  vars:
    ansible_python_interpreter: "{{ vault_ansible_python_interpreter }}"
    use_become: "{{ vault_ansible_become_user is defined and vault_ansible_become_user != '' }}"
  tasks:
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Deleting existing email secrets
      become: "{{use_become}}"
      shell: >
        /tmp/docker-or-podman exec -it {{ vault_name }}
        vault kv delete kv/email
    - name: Inserting email secrets
      become: "{{use_become}}"
      shell: >
        /tmp/docker-or-podman exec -it {{ vault_name }}
        vault kv put kv/email username={{vault_email_user}}
        password='{{vault_email_password}}'
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/create_systemd.py
        - /tmp/docker-or-podman
- hosts: core
  vars:
    ansible_python_interpreter: "{{ core_ansible_python_interpreter }}"
    ansible_become_user: "{{ core_ansible_become_user if core_ansible_become_user is defined else 'root' }}"
    use_become: "{{ core_ansible_become_user is defined and core_ansible_become_user != '' }}"
  tasks:
    - name: Creating share directory with admin group
      file:
        path: "{{core_root_dir}}/freva/web"
        state: directory
        mode: "2775"
        group: "{{core_admin_group}}"
      become: "{{use_become}}"
      when: core_admin_group is defined
    - name: Creating share directory without admin group
      file:
        path: "{{core_root_dir}}/freva/web"
        state: directory
        mode: "2775"
        recurse: true
      become: "{{use_become}}"
      when: core_admin_group is not defined
    - name: Adding freva web config to the core structure
      copy:
        src: "{{ core_config_toml_file }}"
        dest: "{{ core_root_dir }}/freva/web/freva_web_conf.toml"
        mode: "2775"
      become: "{{use_become}}"

- hosts: web

  vars:
    ansible_python_interpreter: "{{ web_ansible_python_interpreter }}"
    service_dir: /opt/freva/{{project_name}}/web_service
    compose_file: /opt/freva/compose_services/{{databrowser_name}}-compose.yml
    web_volumes:
      - "{{ core_root_dir }}:{{ core_root_dir }}:ro"
      - "{{ core_scheduler_output_dir}}:{{ core_scheduler_output_dir }}:ro"
      - "/opt/freva/{{project_name}}/web_service/static:/opt/freva_web/static:z"
      - "{{core_base_dir_location}}:{{core_base_dir_location}}:ro"
    apache_volumes:
      - "/opt/freva/{{project_name}}/web_service/freva_web.conf:/usr/local/apache2/conf/httpd.conf:z"
      - "/opt/freva/{{project_name}}/web_service/server-cert.crt:/etc/ssl/certs/server-cert.crt:z"
      - "/opt/freva/{{project_name}}/web_service/server-key.key:/etc/ssl/private/server-key.key:z"
      - "/opt/freva/{{project_name}}/web_service/cacert.pem:/etc/ssl/certs/cacert.pem:z"
      - "/opt/freva/{{project_name}}/web_service/static:/srv/static:z"
      - "/opt/freva/{{project_name}}/web_service/prepare-httpd:/usr/local/bin/prepare-httpd:z"
      - "{{ core_preview_path }}:/srv/static/preview:z"
      docker_apache_cmd: >
        --rm
        -e SCHEDULER_DIR={{core_scheduler_output_dir}}
        -e UID=$(id -u {{ansible_user}})
        -e GID=$(id -g {{ansible_user}})
        --name "{{project_name}}-httpd"
        --security-opt label=disable
        -e DATABROWSER_HOST={{web_databrowser_host}}
        -e FREVA_HOST={{web_server_name}} -p 80:80 -p 443:443
        httpd:latest /usr/local/bin/prepare-httpd
    redis_name: "{{ project_name }}-redis"
    apache_name: "{{project_name}}-httpd"
    web_name: "{{project_name}}-web"
    use_become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
  tasks:
    - name: Get UID
      command: id -u {{ ansible_user }}
      register: uid_result
    - name: Get GID
      command: id -g {{ ansible_user }}
      register: gid_result
    - name: Set UID and GID as facts
      set_fact:
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Getting register to core dir
      stat:
        path: "{{ core_root_dir }}/freva/evaluation_system.conf"
      register: core
    - name: Registering systemctl path
      stat:
        path: /usr/bin/systemctl
      register: systemctl
    - name: Exiting if core path does not exist on machine
      fail:
        msg: >
          "Error: core not available on machine. "
          "The core hasn't been deployed yet, or wasn't mounted into its "
          "expected location: {{core_root_dir}}"
      when: core.stat.exists == false
    - name: Stopping services
      shell: >
        systemctl stop {{ web_name }} {{ redis_name }} {{ apache_name }};
        systemctl disable {{ web_name }} {{ redis_name }} {{ apache_name }};
        systemctl reset-failed;
        /tmp/docker-or-podman stop {{web_name}} {{web_name}} {{redis_name}};
        /tmp/docker-or-podman rm {{web_name}} {{redis_name}} {{apache_name}};
        /tmp/docker-or-podman rmi -f docker.io/redis ghcr.io/freva-clint/freva-web docker.io/httpd;
        echo 0
      ignore_errors: true
      become: "{{use_become}}"
    - name: Deleting existing web-directory
      file:
        state: absent
        path: "{{service_dir}}"
      become: "{{use_become}}"
    - name: Creating volume dir for web
      become: "{{use_become}}"
      file:
        path: "{{service_dir}}/static"
        state: directory
    - name: Copying httpd entrypoint script
      become: "{{use_become}}"
      copy:
        src: "{{ asset_dir }}/scripts/prepare-httpd"
        dest: "/opt/freva/{{project_name}}/web_service/prepare-httpd"
        mode: "0775"
    - name: Creating compose directory structure
      file:
        path: /opt/freva/compose_services/foo
        state: directory
        recurse: true
      become: "{{use_become}}"
    - name: Copying key files files
      become: "{{use_become}}"
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - {src: "{{web_apache_config_file}}",
           dest: "{{service_dir}}/freva_web.conf"}
        - {src: "{{web_public_keyfile}}",
           dest: "{{service_dir}}/server-cert.crt"}
        - {src: "{{web_private_keyfile}}",
           dest: "{{service_dir}}/server-key.key"}
        - {src: "{{web_chain_keyfile}}",
           dest: "{{service_dir}}/cacert.pem"}
    - name: Pulling containers
      become: "{{use_become}}"
      shell:
        cmd: /tmp/docker-or-podman pull {{item}}
      with_items:
        - "docker.io/redis:latest"
        - "docker.io/httpd:latest"
        - "ghcr.io/freva-clint/freva-web"
    - name: Copying systemd files
      copy:
        src: "{{ asset_dir }}/scripts/create_systemd.py"
        dest: /tmp/create_systemd.py
        mode: "0755"
    - name: Creating compose file
      become: "{{use_become}}"
      template:
        src: "{{ asset_dir }}/playbooks/web-server-compose-template.yml"
        dest: "/opt/freva/compose_services/{{databrowser_name}}-compose.yml"
    - name: Creating system services
      become: "{{use_become}}"
      shell: |
        /tmp/create_systemd.py {{web_name}} compose --enable --project-name {{project_name}} -f {{compose_file}} up
      when: systemctl.stat.exists == true
    - pause: seconds=15
    - name: Restarting services
      become: "{{use_become}}"
      shell: systemctl restart {{item}}
      with_items:
        - "{{apache_name}}"
        - "{{web_name}}"
      when: systemctl.stat.exists == true
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/{{project_name}}_web
        - /tmp/create_systemd.py
        - /tmp/docker-or-podman
