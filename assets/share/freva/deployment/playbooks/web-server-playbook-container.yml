---
- name: Deploying web service
  hosts: web

  become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ web_ansible_python_interpreter }}"
    become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
    service_dir: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service"
    old_compose_dir: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/compose_services"
    compose_file: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/compose_services/{{web_name}}-compose.yml"
    web_config_file: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/web/freva_web_conf.toml"
    web_volumes:
      - "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}:{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}:ro"
      - "{{ core_scheduler_output_dir|regex_replace('^~', ansible_env.HOME)}}:{{ core_scheduler_output_dir | regex_replace('^~', ansible_env.HOME)}}:ro"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/static:/opt/freva_web/static:z"
      - "{{core_base_dir_location|regex_replace('^~', ansible_env.HOME)}}:{{core_base_dir_location|regex_replace('^~', ansible_env.HOME)}}:ro"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/healthcheck.sh:/tmp/healthcheck.sh:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/migrations:/opt/freva_web/base/migrations:z"
    nginx_volumes:
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/freva_web.conf:/etc/nginx/nginx.conf:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/server-cert.crt:/tmp/server-cert.crt:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/server-key.key:/tmp/server-key.key:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/static:/srv/static:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/log:/var/log/web:z"
      - "{{ core_preview_path | regex_replace('^~', ansible_env.HOME)}}:/srv/static/preview:ro"
    redis_volumes:
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/rootless-entrypoint.sh:/tmp/entrypoint.sh:z"
    redis_name: "{{ project_name }}-cache"
    nginx_name: "{{project_name}}-httpd"
    web_name: "{{project_name}}-web"
    service_path: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/"
    ansible_become_user: "{{ web_ansible_become_user if web_ansible_become_user is defined else 'root' }}"
    web_port_httpd: "{{ '80' if web_ansible_become_user == 'root' or ansible_user == 'root' else '9080' }}"
    web_port_httpsd: "{{ '443' if web_ansible_become_user == 'root' or ansible_user == 'root'  else '9443' }}"
    healthchecks:
      - name: "{{project_name}}-web"
        cmd:  'python -V'
      - name: "{{project_name}}-cache"
        cmd: 'redis-cli ping'
      - name: "{{project_name}}-httpd"
        cmd: 'nginx -t'

  tasks:
    - name: Removing old compose directory structure
      file:
        path: "{{old_compose_dir}}"
        state: absent
        force: true
    - name: Get UID
      command: id -u {{ ansible_user }}
      register: uid_result
    - name: Get GID
      command: id -g {{ ansible_user }}
      register: gid_result
    - name: Set UID and GID as facts
      set_fact:
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Override facts for debug mode
      set_fact:
        web_server_name: 127.0.0.1
        web_freva_rest_host: 127.0.0.1
      when: debug
    - name: Getting register to core dir
      stat:
        path: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/evaluation_system.conf"
      register: core
    - name: Registering systemctl path
      stat:
        path: /usr/bin/systemctl
      register: systemctl
    - name: Exiting if core path does not exist on machine
      fail:
        msg: >
          "Error: core not available on machine. "
          "The core hasn't been deployed yet, or wasn't mounted into its "
          "expected location: {{core_root_dir}}"
      when: core.stat.exists == false
    - name: Stopping services
      shell: >
        systemctl stop {{ web_name }} {{ redis_name }} {{ nginx_name }};
        systemctl disable {{ web_name }} {{ redis_name }} {{ nginx_name }};
        systemctl reset-failed;
        /tmp/docker-or-podman stop {{web_name}} {{nginx_name}} {{redis_name}};
        /tmp/docker-or-podman rm -f {{web_name}} {{redis_name}} {{nginx_name}};
        echo 0
      ignore_errors: true
    - name: Registering web data path
      stat:
        path: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}"
      register: data_path
    - name: Deleting existing web-directory
      file:
        path: "{{service_dir}}"
        state: absent
    - name: Creating volume dir for web
      file:
        path: "{{item}}"
        state: directory
        recurse: true
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - "{{service_dir}}"
        - "{{service_dir}}/static"
        - "{{service_dir}}/cache"
        - "{{service_dir}}/log"
        - "{{service_dir}}/migrations"

    - name: Copy entrypoint wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/{{item}}"
        dest: '{{service_path}}/{{item}}'
        owner: "{{uid}}"
        group: "{{gid}}"
        mode: "0755"
      with_items:
        - "rootless-entrypoint.sh"
        - "healthcheck.sh"

    - name: Creating compose directory structure
      file:
        path: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/compose_services"
        state: directory
        recurse: true

    - name: Copying  httpd files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        mode: "0775"
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - {src: "{{web_public_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/server-cert.crt"}
        - {src: "{{web_private_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/server-key.key"}

    - name: Creating nginx config file.
      template:
        src: "{{ asset_dir }}/web/nginx-container.j2"
        dest: "{{ service_dir }}/freva_web.conf"
        mode: "0644"
        owner: "{{uid}}"
        group: "{{gid}}"

    - name: Pulling containers
      shell:
        cmd: /tmp/docker-or-podman pull {{ item }}
      with_items:
        - "docker.io/redis:latest"
        - "ghcr.io/freva-clint/freva-web:{{web_version}}"
        - "docker.io/nginx:latest"

    - name: Copying systemd files
      copy:
        src: "{{ asset_dir }}/scripts/create_systemd.py"
        dest: /tmp/create_systemd.py
        mode: "0755"
    - name: Creating compose file
      template:
        src: "{{ asset_dir }}/playbooks/web-server-compose-template.yml"
        dest: "{{compose_file}}"
    - name: Deleting potential exsiting containers
      shell:
        cmd: /tmp/docker-or-podman rm -f {{web_name}} {{redis_name}} {{nginx_name}}
    - name: Creating system services
      shell: |
        /tmp/create_systemd.py {{web_name}} compose --enable --project-name {{web_name}} -f {{compose_file}} up --remove-orphans
      environment:
        DEBUG: '{{ debug }}'
      when: systemctl.stat.exists == true and debug == false
    - name: Starting compose service
      shell: /tmp/docker-or-podman compose -f {{compose_file}} up -d
      when: systemctl.stat.exists == false or debug == true
    - pause: seconds=15
    - name: Restarting services
      shell: >
         {% if (become == true and ansible_become_user == 'root') or ansible_user == 'root' %}
            systemctl restart {{ web_name }}
         {% else %}
            systemctl --user restart {{ web_name }}
         {% endif %}
      when: systemctl.stat.exists == true and debug == false
    - pause: seconds=30
    - name: Container healthchecks
      shell: >
        /tmp/docker-or-podman exec {{item.name}} {{item.cmd}}
      with_items: "{{healthchecks}}"
    - name: Fixing missing content
      shell:  /tmp/docker-or-podman exec -it {{project_name}}-web {{item}}
      with_items:
        - "python manage.py makemigrations base"
        - "python manage.py migrate --fake-initial --noinput"
        - "python manage.py migrate --fake contenttypes"
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/{{project_name}}_web
        - /tmp/create_systemd.py
        - /tmp/docker-or-podman
    - name: Display message about Apache HTTPD ports
      debug:
        msg: >
          Apache HTTPD is deployed on port {{ web_port_httpd }} instead of 80
          and {{ web_port_httpsd }} instead of 443.
          Since you are not running as root, consider setting up a reverse proxy
          to forward connections from port 80 and 443 to ports {{ web_port_httpd }}
          and {{ web_port_httpsd }} respectively.
      when: ansible_become_user != 'root'
