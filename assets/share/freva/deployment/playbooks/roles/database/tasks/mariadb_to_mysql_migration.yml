---
- name: Adjusting ownership of volume dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ uid }}"
    group: "{{ gid }}"
    recurse: true
  with_items:
    - "{{ db_tempdir.path }}"

- name: Pulling MariaDB Container
  shell: "{{ docker_bin }} pull docker.io/mariadb:11.1"

- name: Adjusting container permissions
  shell: >
    {{ docker_bin }} run --rm
    -v {{db_name}}_data:/data:rw
    alpine sh -c "chmod -R 777 /data && chown -R {{uid}}:{{gid}} /data"

- name: Creating migration compose file for MariaDB
  template:
    src: "db-temp-server-compose.j2"
    dest: "{{ temp_compose_file }}"
  vars:
    container: "docker.io/mariadb:11.1"
    command: "mariadbd-safe"
    flags: "--skip-grant-tables --skip-networking"

- name: Start temporary MariaDB container using compose
  shell: >
    {{ compose_bin }} -f {{ temp_compose_file }}
    --project-name {{ db_name }} up -d
  changed_when: true

- name: Wait for MariaDB socket to be ready
  shell: >
    {{ docker_bin }}  exec temp-db
    sh -c '[ -S /run/mysqld/mysqld.sock ] || [ -S /var/run/mysqld/mysqld.sock ]'
  retries: 10
  delay: 3
  register: mariadb_ready
  until: mariadb_ready.rc == 0

- pause: seconds=10

- name: Dump MariaDB databases to shared volume
  shell: >
    {{ docker_bin }} exec temp-db
    sh -c "mariadb-dump {{ db }} | gzip -9 > /backup/dump.sql.gz"

- name: Stop and remove temporary MariaDB container
  shell: >
    {{ compose_bin }} --project-name {{ db_name }}
    -f {{ temp_compose_file }} down

- name: Creating migration compose file for MySQL
  template:
    src: "db-temp-server-compose.j2"
    dest: "{{ temp_compose_file }}"
  vars:
    container: "docker.io/mysql:{{ db_version }}"
    command: ""
    flags: "--skip-networking"

- name: Remove any existing DB data
  shell: >
    {{ docker_bin }} run --rm
    -v {{db_name}}_data:/data:rw
    alpine sh -c "rm -fr /data/*"

- name: Start temporary MySQL container using compose
  shell: >
    {{ compose_bin }} --project-name {{ db_name }}
    -f {{ temp_compose_file }} up -d
  changed_when: true

- name: Wait for MySQL socket to be ready
  shell: >
    {{ docker_bin }} exec temp-db
    sh -c '[ -S /run/mysqld/mysqld.sock ] || [ -S /var/run/mysqld/mysqld.sock ]'
  retries: 10
  delay: 3
  register: mysql_ready
  until: mysql_ready.rc == 0

- pause: seconds=5

- name: Import SQL dump into MySQL container
  shell: >
    {{ docker_bin }} exec temp-db
    sh -c "gunzip -c /backup/dump.sql.gz |
    sed -e 's/utf8mb4_uca1400_ai_ci/utf8mb4_0900_ai_ci/g' |
    mysql -uroot -p'{{ root_passwd }}'
    {{ db }}"
