---
- name: Running common conda tasks
  include_tasks: "conda.yml"

- name: Get the web app
  unarchive:
    src: https://github.com/FREVA-CLINT/freva-web/releases/download/{{ web_version }}/freva-web-bundle.tar.gz
    dest: "{{ data_dir }}/app"
    remote_src: true
    keep_newer: false

- name: Installing conda dependencies
  shell:
    cmd: |
      {{conda_path}}/bin/mamba env update -p {{conda_path}} -y --file {{ data_dir }}/app/conda-env.yml
      {{conda_path}}/bin/mamba install -c conda-forge --override-channels -y -q jinja2
  environment:
    MAMBA_ROOT_PREFIX: "{{conda_path}}"

- name: Install pip dependencies
  shell:
    cmd: >
      {{conda_path}}/bin/python -m pip install --no-input -U
      --progress-bar off --no-color
      --root-user-action ignore {{ pip_packages | join(' ') }}


- name: Adjusting web app ownership
  file:
    path: "{{ data_dir }}/app"
    state: directory
    recurse: true
    owner: "{{ uid }}"
    group: "{{ gid }}"

- name: Get free Redis port using Python
  shell: >
    {{ conda_path }}/bin/python3 -c
    "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  register: redis_port_result
  changed_when: false

- name: Creating environment file for redis
  template:
    src: "service.env.j2"
    dest: "{{ data_dir }}/config/service-redis.env"
    owner: "{{ uid }}"
    group: "{{ gid }}"
  vars:
    service_name: "{{ web_cache_name }}"
    env_vars:
      API_LOG_DIR: "{{ data_dir }}/logs"
      API_CONFIG_DIR: "{{ data_dir }}/config"
      CONDA_PREFIX: "{{ conda_path }}"
      REDIS_PASSWORD: "{{ web_redis_password }}"
      REDIS_USERNAME: "{{ web_redis_username }}"
      REDIS_PORT: "{{ redis_port_result.stdout }}"

- name: Creating environment file for web app
  template:
    src: "service.env.j2"
    dest: "{{ data_dir }}/config/service-web.env"
    owner: "{{ uid }}"
    group: "{{ gid }}"
  vars:
    service_name: "{{ web_name }}"
    env_vars:
      ALLOWED_HOSTS: "{{web_allowed_hosts | join(',')}}"
      API_LOG_DIR: "{{ data_dir }}/logs"
      API_CONFIG_DIR: "{{ conda_path }}/share/freva-rest-server/nginx"
      CHATBOT_HOST: '{{ web_chatbot_host.replace("http://", "") }}'
      COLUMNS: "140"
      CONDA_PREFIX: "{{ conda_path }}"
      CSRF_TRUSTED_ORIGINS: "{{ web_csrf_trusted_origins | join(',') }}"
      DJANGO_SUPERUSER_EMAIL: "freva@dkrz.de"
      DJANGO_SUPERUSER_PASSWORD: "{{ root_passwd }}"
      EVALUATION_SYSTEM_CONFIG_FILE: "{{ core_root_dir|regex_replace('^~', ansible_env.HOME) }}/freva/evaluation_system.conf"
      FREVA_REST_HOST: '{{ web_freva_rest_host.replace("http://", "") }}'
      FILL_COLOR: "{{ web_main_color }}"
      FREVA_REST_URL: 'http://{{ web_freva_rest_host.replace("http://", "") }}'
      FREVA_BIN: "{{ web_freva_bin }}"
      FREVA_WEB_CONFIG_FILE: "{{ web_config_file }}"
      REDIS_HOST: "localhost"
      REDIS_PASSWD: "{{ web_redis_password }}"
      REDIS_USER: "{{ web_redis_username }}"
      REDIS_PORT: "{{ redis_port_result.stdout }}"
      REST_PROXY_HOST_NAME: "{{ web_chatbot_rest_api_url }}"
      OIDC_DISCOVERY_URL: "{{ web_oidc_url }}"
      OIDC_CLIENT_SECRET: "{{ web_oidc_client_secret }}"
      OIDC_CLIENT_ID: "{{ web_oidc_client }}"
      PORT_HTTPSD: "{{ web_port_httpsd }}"
      PROJECT_NAME: "{{ project_name }}"
      PROXY_GROUP: "{{ admin_group }}"
      PROXY_USER: "{{ admin_user }}"
      SCHEDULER_HOST: "{{ web_scheduler_host | join(',') }}"
      SERVER_CERT: "{{ web_cert_content }}"
      SERVER_KEY: "{{ web_key_content }}"
      SERVER_ROOT: "{{ data_dir }}/app/static"
      VAULT_HOST: '{{ web_vault_host.replace("http://", "") }}:5002'
      WEB_SERVER_NAME: "localhost"
      WEB_SERVER_PORT: "8000"


- name: Create systemd services
  template:
    src: "{{ item.src }}"
    dest: "{{ systemd_unit_dir }}/{{ item.dest }}.service"
  loop:
    - { src: systemd-conda-redis.j2, dest: "{{ web_cache_name }}" }
    - { src: systemd-conda-nginx.j2, dest: "{{ web_proxy_name }}" }
    - { src: systemd-conda-django.j2, dest: "{{ web_name }}" }

- name: Reload systemd
  systemd:
    daemon_reload: yes
    scope: "{{ 'system' if ansible_become is true else 'user' }}"

- name: Enable and start web services
  systemd:
    name: "{{ item }}"
    enabled: true
    state: started
    scope: "{{ 'system' if ansible_become is true else 'user'}}"
  loop:
    - "{{ web_proxy_name }}.service"
    - "{{ web_cache_name }}.service"
    - "{{ web_name }}.service"

- name: Run health checks
  shell:
    cmd: "{{ item }}"
    chdir: "{{ data_dir }}/app"
  environment:
    GIT_PYTHON_REFRESH: "quiet"
    EVALUATION_SYSTEM_CONFIG_FILE: "{{core_root_dir|regex_replace('^~', ansible_env.HOME)}}/freva/evaluation_system.conf"
    NGINX_PORT: "{{ web_port_httpsd }}"
  loop:
    - "{{ conda_path }}/libexec/freva-rest-server/healthchecks.sh -s nginx"
    - "{{ conda_path }}/bin/python manage.py check"

- name: Create Django user via manage.py shell
  when: debug | default(false)
  shell: >
    python manage.py shell -c
    "from django.contrib.auth import get_user_model;
    User = get_user_model();
    User.objects.filter(is_superuser=True).delete();
    u = User.objects.filter(username='{{ ansible_user }}').first() or
    User.objects.create_user(username='{{ ansible_user }}', password='{{root_passwd}}');
    u.is_staff = True; u.is_superuser = True; u.save()"
  args:
    chdir: "{{ data_dir }}/app"
  environment:
    PATH: "{{conda_path}}/bin:{{ ansible_env.PATH }}"
    DJANGO_SUPERUSER_EMAIL: "freva@dkrz.de"
    DJANGO_SUPERUSER_PASSWORD: "{{ root_passwd }}"
    EVALUATION_SYSTEM_CONFIG_FILE: "{{ core_root_dir|regex_replace('^~', ansible_env.HOME) }}/freva/evaluation_system.conf"
    FREVA_WEB_CONFIG_FILE: "{{ web_config_file }}"


- name: Display message about Nginx ports
  debug:
    msg: >
      The Nginx web server is deployed on port {{ web_port_httpd }} instead of 80
      and {{ web_port_httpsd }} instead of 443.
      Since you are not running as root, consider setting up a reverse proxy
      to forward connections from port 80 and 443 to ports {{ web_port_httpd }}
      and {{ web_port_httpsd }} respectively.
  when: ansible_become_user != 'root'
