---
- name: Check for docker binary
  command: which docker
  register: docker_check
  ignore_errors: true
  changed_when: false

- name: Check for podman binary
  command: which podman
  register: podman_check
  ignore_errors: true
  changed_when: false

- name: Check for podman-compose binary
  command: which podman-compose
  register: podman_compose_check
  ignore_errors: true
  changed_when: false
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: Set available engines
  set_fact:
    available_engines:
      docker: "{{ docker_check.rc == 0 }}"
      podman: "{{ podman_check.rc == 0 }}"

- name: Fail if no container engine is available
  fail:
    msg: "Neither Docker nor Podman is installed on this system."
  when: not (available_engines.docker or available_engines.podman)

- name: Prefer user-selected deployment_method if available
  when: available_engines[deployment_method] | default(false)
  set_fact:
    docker_bin: "{{ docker_check.stdout if deployment_method == 'docker' else podman_check.stdout }}"

- name: Fallback to other container engine with warning
  when: not available_engines[deployment_method] | default(false)
  block:
    - name: Emit warning and set fallback container engine
      set_fact:
        docker_bin: >-
          {{ podman_check.stdout if deployment_method == 'docker' and available_engines.podman else docker_check.stdout }}
    - name: Warn user about fallback
      debug:
        msg: >-
          Preferred engine '{{ deployment_method }}' is not installed.
          Falling back to '{{ 'podman' if deployment_method == 'docker' else 'docker' }}'.

- name: Install podman-compose via pip if needed
  when:
    - docker_bin is search('podman')
  block:
    - name: Ensure pip is installed
      package:
        name: python3-pip
        state: present

    - name: Install podman-compose via pip
      pip:
        name: podman-compose
        executable: pip3

    - name: Re-check for podman-compose after install
      command: which podman-compose
      register: podman_compose_check_post
      changed_when: false
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Set compose_bin to installed podman-compose
      set_fact:
        compose_bin: "{{ podman_compose_check_post.stdout }}"
      when: podman_compose_check_post.rc == 0

- name: Detect and prioritize 'docker compose' plugin if using Docker
  when:
    - docker_bin is search('docker')
  block:
    - name: Check for 'docker compose' plugin
      command: "{{ docker_bin }} compose version"
      register: docker_compose_plugin_check
      ignore_errors: true
      changed_when: false

    - name: Set compose_bin to 'docker compose' plugin
      set_fact:
        compose_bin: "{{ docker_bin }} compose"
      when: docker_compose_plugin_check.rc == 0

    - name: Fallback to docker-compose binary if plugin is missing
      when:
        - docker_compose_plugin_check.rc != 0
        - compose_bin is not defined or compose_bin == ''
      block:
        - name: Re-check for docker-compose binary
          command: which docker-compose
          register: docker_compose_check_post
          changed_when: false
          environment:
            PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

        - name: Set compose_bin to docker-compose binary
          set_fact:
            compose_bin: "{{ docker_compose_check_post.stdout }}"
          when: docker_compose_check_post.rc == 0

    - name: Fallback to pip-installed docker-compose if still not found
      when: compose_bin is not defined or compose_bin == ''
      block:
        - name: Ensure pip is installed
          package:
            name: python3-pip
            state: present

        - name: Install docker-compose via pip
          pip:
            name: docker-compose
            executable: pip3

        - name: Re-check for pip-installed docker-compose
          command: which docker-compose
          register: docker_compose_check_post_pip
          changed_when: false
          environment:
            PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

        - name: Set compose_bin to pip-installed docker-compose
          set_fact:
            compose_bin: "{{ docker_compose_check_post_pip.stdout }}"
          when: docker_compose_check_post_pip.rc == 0

- name: Final fail if compose_bin still not found
  fail:
    msg: "No compatible compose binary found (docker compose, docker-compose, or podman-compose)."
  when: compose_bin is not defined or compose_bin == ''
