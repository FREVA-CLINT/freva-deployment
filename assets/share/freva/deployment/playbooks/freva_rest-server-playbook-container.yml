---
- name: Deploying freva restAPI
  hosts: freva_rest

  become: "{{ freva_rest_ansible_become_user is defined and freva_rest_ansible_become_user != '' }}"
  vars:
    become: "{{ freva_rest_ansible_become_user is defined and freva_rest_ansible_become_user != '' }}"
    ansible_python_interpreter: "{{ freva_rest_ansible_python_interpreter }}"
    freva_rest_name: "{{project_name}}-freva_rest"
    databrowser_name: "{{project_name}}-databrowser"
    compose_file: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/compose_services/{{freva_rest_name}}-compose.yml'
    old_compose_dir: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/compose_services'
    data_path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/data'
    log_path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/log'
    cert_path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/certs'
    databrowser_path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/databrowser'
    mongo_path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/stats'
    solr_data: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/solr_service'
    solr_name: "{{project_name}}-solr"
    mongo_name: "{{project_name}}-mongo"
    healthchecks:
      - name: "{{project_name}}-freva_rest"
        cmd:  'solr status'
      - name: "{{project_name}}-freva_rest"
        cmd: "python -c \"import pymongo; pymongo.MongoClient('mongodb://{{freva_rest_db_user}}:{{freva_rest_db_passwd}}@localhost:27017?timeoutMS=2000').list_database_names()\""
    rest_volumes:
      - '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/data:/var/data:z'
      - '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva_rest/log:/var/log:z'
      - '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva-service-config/solr/daily_backup.sh:/usr/local/bin/daily_backup:z'
    ansible_become_user: "{{ freva_rest_ansible_become_user | default('root') }}"
  tasks:
    - name: Get UID
      command: id -u {{ ansible_user }}
      register: uid_result
    - name: Get GID
      command: id -g {{ ansible_user }}
      register: gid_result
    - name: Set UID and GID as facts
      set_fact:
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"
    - name: Removing old compose directory structure
      file:
        path: "{{old_compose_dir}}"
        state: absent
        force: true
    - name: Decode Base64 information content
      set_fact:
        information: "{{ freva_rest_cache_information | b64decode }}"
    - name: Set all additional variables
      set_fact:
        username: "{{ information.user }}"
        password: "{{ information.passwd }}"
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Registering systemctl path
      stat:
        path: /usr/bin/systemctl
      register: systemctl
    - name: Registering anacron path
      stat:
        path: /etc/cron.daily
      register: cron
    - name: Stopping services and deleting existing containers
      shell: >
        systemctl stop {{solr_name}} {{mongo_name}} {{freva_rest_name}} {{databrowser_name}};
        systemctl disable {{solr_name}} {{mongo_name}} {{freva_rest_name}} {{databrowser_name}};
        systemctl reset-failed;
        /tmp/docker-or-podman rm -f {{solr_name}} {{mongo_name}} {{freva_rest_name}} {{databrowser_name}};
        exit 0
      ignore_errors: true
    - pause: seconds=5
    - name: Deleting old systemd structure
      file:
        state: absent
        path: "/etc/systemd/system/{{item}}.service"
        force: true
      with_items:
        - "{{solr_name}}"
        - "{{mongo_name}}"
        - "{{freva_rest_name}}"
        - "{{project_name}}-databrowser"
      when: systemctl.stat.exists == true
    - name: Deleting config file
      file:
        state: absent
        path: "{{item}}"
        force: true
      with_items:
        - '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva-service-config/'
        - '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/freva-service-config/'
    - name: Cleaning existing directory structure
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - "{{solr_data}}"
        - "{{data_path}}"
        - "{{databrowser_path}}"
      when: freva_rest_wipe == true
    - name: Adjusting old solr directory structure
      command: mv "{{solr_data}}/data/{{item}}" "{{data_path}}/solr/{{item}}"
      args:
        removes: "{{solr_data}}/data/{{item}}"
        creates: "{{data_path}}/solr/{{item}}"
      with_items:
        - "files"
        - "latest"
    - name: Adjusting old mongod directory structure
      command: mv "{{mongo_path}}" "{{data_path}}/mongodb"
      args:
        removes: "{{mongo_path}}"
        creates: "{{data_path}}/mongodb"
    - name: Removing old data structure
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{solr_data}}"
        - "{{databrowser_path}}"
        - "{{mongo_path}}"
    - name: Creating service data directory structure
      file:
        path: "{{item}}"
        state: directory
        recurse: true
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - '{{data_path}}/solr'
        - '{{data_path}}/mongodb'
        - '{{log_path}}/mongodb'
        - '{{log_path}}/solr'
        - '{{cert_path}}'
    - name: Writing ssl key to file
      copy:
        content: "{{ information.ssl_key }}"
        dest: "{{cert_path}}/client-key.pem"
    - name: Writing ssh cert to file
      copy:
        content: "{{ information.ssl_cert }}"
        dest: "{{cert_path}}/client-cert.pem"
    - name: Creating compose directory structure
      file:
        path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/compose_services'
        state: directory
        recurse: true
    - name: Deleting old compose files
      file:
        path: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/{{databrowser_name}}-compose.yml'
        state: absent
    - name: Getting additional configurations
      git:
        repo: https://github.com/FREVA-CLINT/freva-service-config.git
        dest: '{{freva_rest_data_path|regex_replace("^~", ansible_env.HOME)}}/{{project_name}}/freva-service-config'
        update: true
    - name: Copy systemd files
      copy:
        src: "{{ asset_dir }}/scripts/create_systemd.py"
        dest: /tmp/create_systemd.py
        mode: "0755"
    - name: Pulling container
      shell:
        cmd: /tmp/docker-or-podman pull ghcr.io/freva-clint/freva-rest-api:{{freva_rest_version}}
    - name: Copy cron create script to target machine
      copy: src="{{ asset_dir }}/scripts/create_cron.sh" dest=/tmp/solr_service/
    - name: Creating compose file
      template:
        src: "{{ asset_dir }}/playbooks/freva_rest-server-compose-template.yml"
        dest: "{{compose_file}}"
    - name: Creating systemd services
      shell: |
        /tmp/create_systemd.py {{freva_rest_name}} compose --enable --project-name {{freva_rest_name}} -f {{compose_file}} up --remove-orphans
      environment:
        DEBUG: '{{ debug }}'
      when: systemctl.stat.exists == true and debug == false
    - name: Starting compose service
      shell: /tmp/docker-or-podman compose -f {{compose_file}} up -d
      when: systemctl.stat.exists == false or debug == true
    - pause: seconds=3
    - name: Creating cron jobs
      shell: >
        sh /tmp/solr_service/create_cron.sh "{{ solr_name }}" "{{freva_rest_email}}"
      when: cron.stat.exists == true and debug == false
    - pause: seconds=30
    - name: Container healthchecks
      shell: >
        /tmp/docker-or-podman exec {{item.name}} {{item.cmd}}
      with_items: "{{healthchecks}}"
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/docker-or-podman
        - /tmp/create_systemd.py
        - /tmp/solr_service

- name: Add mongoDB secrets to vault
  hosts: db
  become: "{{ db_ansible_become_user is defined and db_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ db_ansible_python_interpreter }}"
    ansible_become_user: "{{ db_ansible_become_user | default('root') }}"

  tasks:
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"

    - name: Add mongDB secrets to vault
      shell: >
        /tmp/docker-or-podman exec {{ vault_name }} add-vault-secret
        data -s mongo.passwd {{freva_rest_db_passwd}}
        -s mongo.user {{freva_rest_db_user}} -s mongo.db search_stats
        -s mongo.url "mongodb://{{freva_rest_db_user}}:{{freva_rest_db_passwd}}@{{vault_db_host}}:27017?timeoutMS=2000"

    - name: Deleting auxillary files
      file:
        state: absent
        path: /tmp/docker-or-podman

- name: Restarting the web service
  hosts: web
  become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
  vars:
    become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
    compose_file: '{{web_data_path|regex_replace("^~", ansible_env.HOME)}}/compose_services/{{web_name}}-compose.yml'
  tasks:
    - name: Registering systemctl path
      stat:
        path: /usr/bin/systemctl
      register: systemctl
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
      when: systemctl.stat.exists == false or debug == true
    - name: Restarting web container via systemd
      shell: systemctl restart {{web_name}}
      ignore_errors: true
      failed_when: false
      no_log: true
      when: systemctl.stat.exists == true and debug == false
    - name: Restarting compose service
      shell: /tmp/docker-or-podman compose -f {{compose_file}} {{item}}
      with_items:
        - "down"
        - "up -d"
      when: systemctl.stat.exists == false or debug == true
      failed_when: false
      ignore_errors: true
    - name: Deleting auxillary files
      file:
        state: absent
        path: /tmp/docker-or-podman
      when: systemctl.stat.exists == false or debug == true
