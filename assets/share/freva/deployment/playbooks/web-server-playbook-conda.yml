---
- name: Creating web config on the core directory
  hosts: core
  become: "{{ core_ansible_become_user is defined and core_ansible_become_user != '' }}"
  vars:
    become: "{{ core_ansible_become_user is defined and core_ansible_become_user != '' }}"
    ansible_python_interpreter: "{{ core_ansible_python_interpreter }}"
    ansible_become_user: "{{ core_ansible_become_user if core_ansible_become_user is defined else 'root' }}"
  tasks:
    - name: Registering web config path
      stat:
        path: "{{core_root_dir|regex_replace('^~', ansible_env.HOME)}}/freva/web"
      register: web_config

    - name: Creating share directory
      file:
        path: "{{core_root_dir|regex_replace('^~', ansible_env.HOME)}}/freva/web"
        state: directory
        mode: "{{ '2775' if core_admin_group is defined and core_admin_group != '' else '2755' }}"
        group: "{{ core_admin_group if core_admin_group is defined and core_admin_group != '' else omit }}"
      when: not web_config.stat.exists

    - name: Adding freva web config to the core structure
      copy:
        src: "{{ core_config_toml_file | regex_replace('^~', ansible_env.HOME)}}"
        dest: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/web/freva_web_conf.toml"
        mode: "{{ '2664' if core_admin_group is defined and core_admin_group != '' else '2644' }}"
        group: "{{ core_admin_group if core_admin_group is defined and core_admin_group != '' else omit}}"

- name: Deploying web service
  hosts: web

  become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ web_ansible_python_interpreter }}"
    become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
    web_config_file: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/web/freva_web_conf.toml"
    web_name: "{{project_name}}-web"
    conda_path: '{{web_data_path|regex_replace("^~", ansible_env.HOME)}}/{{ project_name }}/conda'
    systemd_unit_dir: "{{ '/etc/systemd/system' if  web_ansible_become_user is defined and web_ansible_become_user != '' else ansible_env.HOME + '/.config/systemd/user' }}"
    ansible_become_user: "{{ web_ansible_become_user if web_ansible_become_user is defined else 'root' }}"
    data_dir: '{{web_data_path|regex_replace("^~", ansible_env.HOME)}}/{{ project_name }}/web_service'
    web_port_httpd: "{{ '80' if web_ansible_become_user == 'root' or ansible_user == 'root' else '9080' }}"
    web_port_httpsd: "{{ '443' if web_ansible_become_user == 'root' or ansible_user == 'root'  else '9443' }}"

  tasks:

    - name: Getting register to core dir
      stat:
        path: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/evaluation_system.conf"
      register: core

    - name: Exiting if core path does not exist on machine
      fail:
        msg: >
          "Error: core not available on machine. "
          "The core hasn't been deployed yet, or wasn't mounted into its "
          "expected location: {{core_root_dir}}"
      when: core.stat.exists == false

    - name: Ensure the user systemd directory exists
      file:
        path: "{{ systemd_unit_dir }}"
        state: directory
        mode: "0755"

    - name: Get UID
      command: id -u {{ ansible_user }}
      register: uid_result

    - name: Get GID
      command: id -g {{ ansible_user }}
      register: gid_result

    - name: Register redis unit
      stat:
        path: "{{ systemd_unit_dir }}/{{project_name}}-cache.service"
      register: redis_unit

    - name: Set UID and GID as facts
      set_fact:
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"

    - name: Run getent command
      command: "getent group {{gid}}"
      register: group_output
      changed_when: false
      failed_when: group_output.rc != 0 and group_output.stdout == ""

    - name: Extract group name
      set_fact:
        group_name: "{{ group_output.stdout.split(':')[0] }}"

    - name: Decode Base64 information content
      set_fact:
        information: "{{ web_cache_information | b64decode }}"

    - name: Set variables
      set_fact:
        redis_cert_dir: '{{data_dir}}/cache'
        username: "{{ information.user }}"
        password: "{{ information.passwd }}"
        log_dir: "{{data_dir}}/log"
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"

    - name: Deleting existing web-directory
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - "{{conda_path}}/libexec/freva-web"
        - "{{data_dir}}"

    - name: Creating redis data dir
      file:
        path: "{{redis_cert_dir}}"
        state: directory
        mode: "0755"
        recurse: true

    - name: Register redis cert file
      stat:
        path: "{{redis_cert_dir}}/client-key.pem"
      register: redis_cert

    - name: Write ssl key to file
      copy:
        content: "{{ information.ssl_key }}"
        dest: "{{redis_cert_dir}}/client-key.pem"
      when: (information.ssl_key | length > 0) and not redis_cert.stat.exists

    - name: Write ssl cert to file
      copy:
        content: "{{ information.ssl_cert }}"
        dest: "{{redis_cert_dir}}/client-cert.pem"
      when: (information.ssl_cert | length > 0) and not redis_cert.stat.exists

    - name: Creating log dir
      file:
        state: directory
        path: "{{log_dir}}"
        recurse: true
        owner: "{{uid}}"
        group: "{{gid}}"

    - name: Creating redis unit
      template:
        src: "{{ asset_dir }}/freva-rest/redis.j2"
        dest: "{{ systemd_unit_dir }}/{{ project_name }}-cache.service"
        mode: "0644"
      when: not redis_unit.stat.exists

    - name: Applying redis settings
      set_fact:
        redis_settings:
          - "REDIS_USER={{username}}"
          - "REDIS_PASSWD={{password}}"
          - "REDIS_SSL_CERTFILE={{redis_cert_dir}}/client-cert.pem"
          - "REDIS_SSL_KEYFILE={{redis_cert_dir}}/client-key.pem"
      when: information.ssl_cert | length > 0

    - name: Applying redis settings
      set_fact:
        redis_settings:
          - "REDIS_USER={{username}}"
          - "REDIS_PASSWD={{password}}"
      when: information.ssl_cert | length == 0

    - name: Creating temp. dir
      tempfile:
        state: directory
        prefix: evaluation_system
      register: tempdir

    - name: Registering conda path
      stat:
        path: "{{ conda_path }}"
      register: conda_env_path

    - name: Registering nginx path
      stat:
        path: "{{ conda_path }}/bin/nginx"
      register: http_bin

    - name: Downloading miniforge
      ansible.builtin.script:
        cmd: "{{ asset_dir }}/scripts/download_conda.py {{ tempdir.path }}"
      when: not conda_env_path.stat.exists

    - name: Creating conda dir
      file:
        path: "{{ conda_path }}"
        recurse: true
      when: not conda_env_path.stat.exists

    - name: Setting up conda environment
      shell:
        cmd: "./conda.sh -b -u -f -p {{conda_path}}"
        chdir: "{{ tempdir.path }}"
      when: not conda_env_path.stat.exists

    - name: Installing nginx
      shell:
        cmd: "{{conda_path}}/bin/mamba install -y redis-server nginx webpack-cli"
      when: not http_bin.stat.exists

    - name: Stopping the web service
      systemd:
        name: "{{ project_name }}-web"
        state: stopped
      ignore_errors: true

    - name: Creating aditional folders
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: "0775"
      with_items:
        - "{{conda_path}}/libexec/freva-web"
        - "{{conda_path}}/var/run/nginx"

    - name: Creating preview path
      file:
        path: "{{ core_preview_path }}"
        state: directory
        recurse: true

    - name: Getting web app
      unarchive:
        src: https://github.com/FREVA-CLINT/freva-web/archive/refs/tags/v{{web_version}}.tar.gz
        dest: "{{conda_path}}/libexec/freva-web"
        remote_src: true
        keep_newer: false
        extra_opts:
          - --strip-components=1

    - name: Creating log dir
      file:
        path: "{{item}}"
        recurse: true
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - "{{data_dir}}"
        - "{{data_dir}}/static"
        - "{{data_dir}}/cache"
        - "{{data_dir}}/migrations"


    - name: Creating nginx config file.
      template:
        src: "{{ asset_dir }}/web/nginx.j2"
        dest: "{{ data_dir }}/freva_web.conf"
        mode: "0644"
        owner: "{{uid}}"
        group: "{{gid}}"

    - name: Downloading mime-types file
      ansible.builtin.script:
        cmd: >
          {{ asset_dir }}/scripts/download.py
          https://raw.githubusercontent.com/nginx/nginx/master/conf/mime.types
          -o {{ data_dir }}/mime.types
      become: false

    - name: Copying cert files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        mode: "0775"
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - {src: "{{web_public_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{data_dir}}/server-cert.crt"}
        - {src: "{{web_private_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{data_dir}}/server-key.key"}

    - name: Installing conda dependencies
      shell:
        cmd: >
          {{conda_path}}/bin/mamba env update -n base -y
          --file {{conda_path}}/libexec/freva-web/conda-env.yml
      environment:
        MAMBA_ROOT_PREFIX: "{{conda_path}}"

    - name: Link static folder
      file:
        src: "{{data_dir}}/static"
        dest: "{{conda_path}}/libexec/freva-web/static"
        state: link

    - name: Building js-code
      shell:
        cmd: "{{item}}"
        chdir: "{{conda_path}}/libexec/freva-web"
      with_items:
        - "npm install"
        - "npm run build-production"
        - "python manage.py makemigrations base"
        - "python manage.py migrate --fake-initial --noinput"
        - "python manage.py migrate --fake contenttypes"
        - "python manage.py collectstatic --noinput"
      environment:
        PATH: "{{conda_path}}/bin:/usr/bin:/bin:/usr/local/bin"
        EVALUATION_SYSTEM_CONFIG_FILE: "{{core_root_dir|regex_replace('^~', ansible_env.HOME)}}/freva/evaluation_system.conf"
        FREVA_WEB_CONFIG_FILE: "{{web_config_file}}"
      become: false

    - name: Cleaning up
      file:
        path: "{{conda_path}}/share/freva-web/app/node_modules"
        state: absent

    - name: Adjusting permissions
      file:
        owner: "{{uid}}"
        group: "{{uid}}"
        recurse: true
        path: "{{item}}"
      with_items:
        - "{{data_dir}}/static"
        - "{{data_dir}}/log"

    - name: Creating systemd unit service
      template:
        src: "{{ asset_dir }}/web/systemd.j2"
        dest: "{{ systemd_unit_dir }}/{{ project_name }}-web.service"
        mode: "0644"

    - name: Reload systemd daemon
      systemd:
        daemon_reload: true
        scope: "{{ 'system' if become is true else 'user'}}"

    - name: Enable and start the web server
      systemd:
        name: "{{ project_name }}-web"
        state: started
        enabled: true
        scope: "{{ 'system' if become is true else 'user'}}"

    - name: Removing temp dirs
      file:
        path: "{{tempdir.path}}"
        state: absent


    - name: Display message about Apache HTTPD ports
      debug:
        msg: >
          Apache HTTPD is deployed on port {{ web_port_httpd }} instead of 80
          and {{ web_port_httpsd }} instead of 443.
          Since you are not running as root, consider setting up a reverse proxy
          to forward connections from port 80 and 443 to ports {{ web_port_httpd }}
          and {{ web_port_httpsd }} respectively.
      when: ansible_become_user != 'root'
