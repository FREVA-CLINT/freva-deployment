---
- hosts: vault
  become: "{{ vault_ansible_become_user is defined and vault_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ vault_ansible_python_interpreter }}"
  tasks:
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Inserting email secrets
      shell: >
        /tmp/docker-or-podman exec {{ vault_name }} add-vault-secret email
        -s username {{vault_email_user}}
        -s password '{{vault_email_password}}'
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/create_systemd.py
        - /tmp/docker-or-podman
- hosts: core
  become: "{{ core_ansible_become_user is defined and core_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ core_ansible_python_interpreter }}"
    ansible_become_user: "{{ core_ansible_become_user if core_ansible_become_user is defined else 'root' }}"
  tasks:
    - name: Creating share directory
      file:
        path: "{{core_root_dir|regex_replace('^~', ansible_env.HOME)}}/freva/web"
        state: directory
        mode: "{{ '2775' if core_admin_group is defined else '2755' }}"
        group: "{{ core_admin_group if core_admin_group is defined else omit }}"
    - name: Adding freva web config to the core structure
      copy:
        src: "{{ core_config_toml_file | regex_replace('^~', ansible_env.HOME)}}"
        dest: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/web/freva_web_conf.toml"
        mode: "{{ '2664' if core_admin_group is defined else '2644' }}"
        group: "{{ core_admin_group if core_admin_group is defined else omit}}"

- hosts: web

  become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
  vars:
    ansible_python_interpreter: "{{ web_ansible_python_interpreter }}"
    become: "{{ web_ansible_become_user is defined and web_ansible_become_user != '' }}"
    service_dir: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service"
    compose_file: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/compose_services/{{web_name}}-compose.yml"
    web_config_file: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/web/freva_web_conf.toml"
    web_volumes:
      - "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}:{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}:ro"
      - "{{ core_scheduler_output_dir|regex_replace('^~', ansible_env.HOME)}}:{{ core_scheduler_output_dir | regex_replace('^~', ansible_env.HOME)}}:ro"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/static:/opt/freva_web/static:z"
      - "{{core_base_dir_location|regex_replace('^~', ansible_env.HOME)}}:{{core_base_dir_location|regex_replace('^~', ansible_env.HOME)}}:ro"
    apache_volumes:
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/freva_web.conf:/usr/local/apache2/conf/httpd.conf:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/server-cert.crt:/etc/ssl/certs/server-cert.crt:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/server-key.key:/etc/ssl/private/server-key.key:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/static:/srv/static:z"
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/prepare-httpd:/usr/local/bin/prepare-httpd:z"
      - "{{ core_preview_path | regex_replace('^~', ansible_env.HOME)}}:/srv/static/preview:ro"
    redis_volumes:
      - "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/cache:/data:z"
    redis_name: "{{ project_name }}-redis"
    apache_name: "{{project_name}}-httpd"
    web_name: "{{project_name}}-web"
    ansible_become_user: "{{ web_ansible_become_user if web_ansible_become_user is defined else 'root' }}"
    web_port_httpd: "{{ '80' if web_ansible_become_user == 'root' or ansible_user == 'root' else '9080' }}"
    web_port_httpsd: "{{ '443' if web_ansible_become_user == 'root' or ansible_user == 'root'  else '9443' }}"
  tasks:
    - name: Get UID
      command: id -u {{ ansible_user }}
      register: uid_result
    - name: Get GID
      command: id -g {{ ansible_user }}
      register: gid_result
    - name: Set UID and GID as facts
      set_fact:
        uid: "{{ uid_result.stdout }}"
        gid: "{{ gid_result.stdout }}"
    - name: Copying docker/podman wrapper script
      copy:
        src: "{{ asset_dir }}/scripts/docker-or-podman"
        dest: /tmp/docker-or-podman
        mode: "0775"
    - name: Getting register to core dir
      stat:
        path: "{{ core_root_dir | regex_replace('^~', ansible_env.HOME)}}/freva/evaluation_system.conf"
      register: core
    - name: Registering systemctl path
      stat:
        path: /usr/bin/systemctl
      register: systemctl
    - name: Exiting if core path does not exist on machine
      fail:
        msg: >
          "Error: core not available on machine. "
          "The core hasn't been deployed yet, or wasn't mounted into its "
          "expected location: {{core_root_dir}}"
      when: core.stat.exists == false
    - name: Stopping services
      shell: >
        systemctl stop {{ web_name }} {{ redis_name }} {{ apache_name }};
        systemctl disable {{ web_name }} {{ redis_name }} {{ apache_name }};
        systemctl reset-failed;
        /tmp/docker-or-podman stop {{web_name}} {{apache_name}} {{redis_name}};
        /tmp/docker-or-podman rm -f {{web_name}} {{redis_name}} {{apache_name}};
        echo 0
      ignore_errors: true
    - name: Registering web data path
      stat:
        path: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}"
      register: data_path
    - name: Creating volume dir for web
      file:
        path: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/{{item}}"
        state: directory
        recurse: true
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - "static"
        - "cache"
    - name: Creating compose directory structure
      file:
        path: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/compose_services"
        state: directory
        recurse: true
    - name: Copying  httpd files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        mode: "0775"
        owner: "{{uid}}"
        group: "{{gid}}"
      with_items:
        - {src: "{{web_apache_config_file|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/freva_web.conf"}
        - {src: "{{web_public_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/server-cert.crt"}
        - {src: "{{web_private_keyfile|regex_replace('^~', ansible_env.HOME)}}",
           dest: "{{service_dir|regex_replace('^~', ansible_env.HOME)}}/server-key.key"}
        - {src: "{{ asset_dir }}/scripts/prepare-httpd",
           dest: "{{web_data_path|regex_replace('^~', ansible_env.HOME)}}/{{project_name}}/web_service/prepare-httpd"}
    - name: Pulling containers
      shell:
        cmd: /tmp/docker-or-podman pull {{ item }}
      with_items:
        - "docker.io/redis:latest"
        - "ghcr.io/freva-clint/freva-web:{{web_version}}"
        - "docker.io/httpd:latest"
    - name: Copying systemd files
      copy:
        src: "{{ asset_dir }}/scripts/create_systemd.py"
        dest: /tmp/create_systemd.py
        mode: "0755"
    - name: Creating compose file
      template:
        src: "{{ asset_dir }}/playbooks/web-server-compose-template.yml"
        dest: "{{compose_file}}"
    - name: Deleting potential exsiting containers
      shell:
        cmd: /tmp/docker-or-podman rm -f {{web_name}} {{redis_name}} {{apache_name}}
    - name: Creating system services
      shell: |
        /tmp/create_systemd.py {{web_name}} compose --enable --project-name {{web_name}} -f {{compose_file}} up --remove-orphans
      environment:
        DEBUG: '{{ debug }}'
      when: systemctl.stat.exists == true
    - pause: seconds=15
    - name: Restarting services
      shell: >
         {% if (become == true and ansible_become_user == 'root') or ansible_user == 'root' %}
            systemctl restart {{ web_name }}
         {% else %}
            systemctl --user restart {{ web_name }}
         {% endif %}
      when: systemctl.stat.exists == true
    - name: Deleting tmporary files
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /tmp/{{project_name}}_web
        - /tmp/create_systemd.py
        - /tmp/docker-or-podman
    - name: Display message about Apache HTTPD ports
      debug:
        msg: >
          Apache HTTPD is deployed on port {{ web_port_httpd }} instead of 80
          and {{ web_port_httpsd }} instead of 443.
          Since you are not running as root, consider setting up a reverse proxy
          to forward connections from port 80 and 443 to ports {{ web_port_httpd }}
          and {{ web_port_httpsd }} respectively.
      when: ansible_become_user != 'root'
