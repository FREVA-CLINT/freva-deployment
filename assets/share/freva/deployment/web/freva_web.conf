ServerRoot "/usr/local/apache2"
Listen ${HTTPD_PORT}

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule access_compat_module modules/mod_access_compat.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
LoadModule reqtimeout_module modules/mod_reqtimeout.so
LoadModule filter_module modules/mod_filter.so
LoadModule deflate_module modules/mod_deflate.so
LoadModule xml2enc_module modules/mod_xml2enc.so
LoadModule proxy_html_module modules/mod_proxy_html.so
LoadModule mime_module modules/mod_mime.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule env_module modules/mod_env.so
LoadModule headers_module modules/mod_headers.so
LoadModule version_module modules/mod_version.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule ssl_module modules/mod_ssl.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule status_module modules/mod_status.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule dir_module modules/mod_dir.so
LoadModule alias_module modules/mod_alias.so
LoadModule rewrite_module modules/mod_rewrite.so

<IfModule unixd_module>
#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.
#
# User/Group: The name (or #number) of the user/group to run httpd as.
# It is usually good practice to create a dedicated user and group for
# running httpd, as with most system services.
#
User www-data
Group www-data

</IfModule>


ServerName ${FREVA_HOST}
ServerAdmin you@example.com

ServerSignature Off
ServerTokens Prod
MaxKeepAliveRequests 100
Timeout 60
KeepAliveTimeout 5

RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI}

Listen ${HTTPDS_PORT}

SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin

<VirtualHost *:${HTTPDS_PORT}>
    # Static files
    ProxyPass /static/ !

    # Set the enable_proxy variable
    SetEnv enable_proxy 1

    # Conditional Proxy Settings
    <If "env('enable_proxy') == '1'">
        # Proxy settings for DATABROWSER_HOST
        ProxyPass /api/freva-nextgen http://${DATABROWSER_HOST}/api/freva-nextgen
        ProxyPassReverse /api/freva-nextgen http://${DATABROWSER_HOST}/api/freva-nextgen

        ProxyPass /api/databrowser/metadata_search http://${DATABROWSER_HOST}/api/freva-nextgen/databrowser/metadata-search
        ProxyPassReverse /api/databrowser/metadata_search http://${DATABROWSER_HOST}/api/freva-nextgen/databrowser/metadata-search

        ProxyPass /api/databrowser/data_search http://${DATABROWSER_HOST}/api/freva-nextgen/databrowser/data-search
        ProxyPassReverse /api/databrowser/data_search http://${DATABROWSER_HOST}/api/freva-nextgen/databrowser/data-search

        ProxyPass /api/freva-data-portal http://${DATABROWSER_HOST}/api/freva-nextgen/data-portal
        ProxyPassReverse /api/freva-data-portal http://${DATABROWSER_HOST}/api/freva-nextgen/data-portal

        ProxyPass /api/auth http://${DATABROWSER_HOST}/api/freva-nextgen/auth
        ProxyPassReverse /api/auth http://${DATABROWSER_HOST}/api/freva-nextgen/auth

        # Proxy settings for FREVA_HOST
        ProxyPass / http://${FREVA_HOST}:8000/
        ProxyPassReverse / http://${FREVA_HOST}:8000/
    </If>

    # SSL configuration
    RequestHeader set X-Forwarded-Proto 'https' env=HTTPS
    SSLEngine on
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256
    SSLHonorCipherOrder on
    SSLCertificateFile /etc/ssl/certs/server-cert.crt
    SSLCertificateKeyFile /etc/ssl/private/server-key.key

    # Security headers
    Header always set Strict-Transport-Security "max-age=15552000; includeSubdomains;"
    Header set X-Frame-Options "SAMEORIGIN"

    # Compression settings
    SetOutputFilter DEFLATE
    SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip

    # Aliases for static resources
    Alias /static /srv/static/
    Alias /robots.txt /srv/static/robots.txt
    Alias /favicon.ico /srv/static/favicon.ico
    Alias /under_construction.gif /srv/static/under_construction.gif
    Alias /index.html /srv/static/outoforder.html
    AliasMatch ^/([^/]*\.css) /srv/static/styles/$1

    # Directory settings
    <Directory /srv/*>
        Options Indexes MultiViews
        AllowOverride None
        Require all granted
    </Directory>

    <Directory ${SCHEDULDER_DIR}/*>
        Options Indexes MultiViews
        AllowOverride None
        Require all granted
    </Directory>
</VirtualHost>



<Files ".ht*">
    Require all denied
</Files>


ErrorLog /proc/self/fd/2


LogLevel info

<IfModule log_config_module>
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    <IfModule logio_module>
      # You need to enable mod_logio.c to use %I and %O
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>

    #
    # The location and format of the access logfile (Common Logfile Format).
    # If you do not define any access logfiles within a <VirtualHost>
    # container, they will be logged here.  Contrariwise, if you *do*
    # define per-<VirtualHost> access logfiles, transactions will be
    # logged therein and *not* in this file.
    #
    # CustomLog /proc/self/fd/1 common
    CustomLog "|/usr/bin/tee /usr/local/apache2/logs/access.log" common

    #
    # If you prefer a logfile with access, agent, and referer information
    # (Combined Logfile Format) you can use the following directive.
    #
    #CustomLog "logs/access_log" combined
</IfModule>


<IfModule headers_module>
    #
    # Avoid passing HTTP_PROXY environment to CGI's on this or any proxied
    # backend servers which have lingering "httpoxy" defects.
    # 'Proxy' request header is undefined by the IETF, not listed by IANA
    #
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig conf/mime.types

    #
    # AddType allows you to add to or override the MIME configuration
    # file specified in TypesConfig for specific file types.
    #
    #AddType application/x-gzip .tgz
    #
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    #
    #AddEncoding x-compress .Z
    #AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz

    #
    # AddHandler allows you to map certain file extensions to "handlers":
    # actions unrelated to filetype. These can be either built into the server
    # or added with the Action directive (see below)
    #
    # To use CGI scripts outside of ScriptAliased directories:
    # (You will also need to add "ExecCGI" to the "Options" directive.)
    #
    #AddHandler cgi-script .cgi

    # For type maps (negotiated resources):
    #AddHandler type-map var

    #
    # Filters allow you to process content before it is sent to the client.
    #
    # To parse .shtml files for server-side includes (SSI):
    # (You will also need to add "Includes" to the "Options" directive.)
    #
    #AddType text/html .shtml
    #AddOutputFilter INCLUDES .shtml
</IfModule>
<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>
