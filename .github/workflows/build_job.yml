name: Create a new release
run-name: ${{ github.actor }} creating a new release ðŸ§‰

# Set the access for individual scopes, or use permissions: write-all
permissions:
  pull-requests: write
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  tests:
    uses: ./.github/workflows/ci_job.yml
  pipy:
    name: Create Pip package
    needs: [tests, build-and-push-vault-image, build]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Adding the evaluation config file
        run: python src/freva_deployment/__init__.py
      -
        name: Install flit
        run: python -m pip install flit
      -
        name: Building freva-deployment ðŸ“¦ with flit
        run: flit build
      -
        name: publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
  build-and-push-vault-image:
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Python 3.X
        uses: actions/setup-python@v4
        with:
          python-version: "3.X"
      -
        name: Install packages
        run: |
         python3 -m pip install -e .

      -
        name: Get tag
        id: repository
        run: |
          echo "repo=$(echo ${{ github.repository }}|tr 'A-Z' 'a-z')" >> $GITHUB_OUTPUT
          echo "tag=$(python -c 'from freva_deployment import __version__;print(__version__)')" >> $GITHUB_OUTPUT
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push vault image
        uses: docker/build-push-action@v4
        with:
          context: assets/share/freva/deployment/vault/
          platforms: linux/amd64
          push: true
          build-args: VERSION=${{steps.repository.outputs.tag}}
          tags: |
            ghcr.io/${{ steps.repository.outputs.repo }}:${{ steps.repository.outputs.tag }}
            ghcr.io/${{ steps.repository.outputs.repo }}:latest
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    needs: pipy
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ASSET_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  build:
    name: Build packages
    needs: [build-and-push-vault-image]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                pyinstaller pyinstaller/pyinstaller-script.py -c --name deploy-freva --onefile
            OUT_FILE_NAME: deploy-freva
            ASSET_MIME: application/octet-stream
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller pyinstaller/pyinstaller-script.py -c --name deploy-freva --onefile
            OUT_FILE_NAME: deploy-freva.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.X
        uses: actions/setup-python@v4
        with:
          python-version: "3.X"
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyinstaller ansible .
      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ASSET_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}
