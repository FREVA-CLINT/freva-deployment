name: Build the binary
run-name: ${{ github.actor }} building the pyinstaller binary ðŸ§‰

permissions:
  pull-requests: write
  contents: write
  packages: write

on:
  push:
    branches: ["**"]
    tags:
      - "v*.*.*"

jobs:
  tests:
    uses: ./.github/workflows/ci_job.yml
  build-no-linux:
    name: Build packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: osx-x64
            asset_mime: application/octet-stream
            exe: deploy-freva
            hidden_import: --hidden-import curses --hidden-import cowsay
          - os: windows-latest
            target: windows-x64
            asset_mime: application/vnd.microsoft.portable-executable
            hidden_import: --hidden-import windows-curses --hidden-import cowsay
            exe: deploy-freva.exe
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python "3.X" on ${{ matrix.os }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.X"
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyinstaller ansible .
      - name: Build with cmd pyinstaller for ${{ matrix.target }}
        run: >
          pyinstaller pyinstaller/pyinstaller-deploy-freva.py -c
          --name deploy-freva --onefile --clean -i docs/_static/freva_owl.ico
          --add-data 'assets/share/freva/deployment:freva_deployment/assets'
          --add-data 'src/freva_deployment/versions.json:freva_deployment'
          ${{matrix.hidden_import}}
          --exclude-module pycrypto --exclude-module PyInstaller
      - name: Upload cmd Asset
        uses: actions/upload-artifact@v3
        with:
          path: dist/${{matrix.exe}}
          name: deploy-freva-${{ matrix.target }}

  build-linux:
    name: Build packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - ARCH: linux/amd64
            target: linux-x64
          - ARCH: linux/arm64
            target: linux-arm64
          - ARCH: linux/arm/v7
            target: linux-armvl7
          - ARCH: linux/arm/v6
            target: linux-armvl6
          - ARCH: linux/ppc64le
            target: linux-ppc64
          - ARCH: linux/s390x
            target: linux-s390x
          - ARCH: linux/i386
            target: linux-i386

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Create Buildx builder
        run: docker buildx create --use --name mybuilder

      - name: Inspect Buildx builder
        run: docker buildx inspect --bootstrap

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          platforms: ${{ matrix.ARCH }}
          push: false
          load: true
          tags: pyinstaller-env:${{ matrix.target }}

      - name: Run PyInstaller in Docker
        run: >
          docker run --rm -v $PWD:/src -w /src pyinstaller-env:${{ matrix.target }}
          pyinstaller pyinstaller/pyinstaller-deploy-freva.py -c
          --name deploy-freva --onefile --clean -i docs/_static/freva_owl.ico
          --add-data 'assets/share/freva/deployment:freva_deployment/assets'
          --add-data 'src/freva_deployment/versions.json:freva_deployment'
          --hidden-import cowsay
          --exclude-module pycrypto --exclude-module PyInstaller

      - name: Upload cmd Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          path: dist/
          name: deploy-freva-${{ matrix.target }}

  pypi:
    name: Create Pip package
    permissions:
      id-token: write
    needs: [tests, build-linux, build-no-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/foo/')
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Adding the evaluation config file
        run: python src/freva_deployment/__init__.py
      -
        name: Install flit
        run: python -m pip install flit
      -
        name: Building freva-deployment ðŸ“¦ with flit
        run: flit build
      -
        name: publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  release:
    name: Create Release
    needs: [build-no-linux, build-linux, pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ASSET_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  upload-builds:
    name: Add binaries to Release
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: linux-x64
            asset_mime: application/octet-stream
          - target: linux-arm64
            asset_mime: application/octet-stream
          - target: linux-armvl7
            asset_mime: application/octet-stream
          - target: linux-armvl6
            asset_mime: application/octet-stream
          - target: linux-ppc64
            asset_mime: application/octet-stream
          - target: linux-s390x
            asset_mime: application/octet-stream
          - target: linux-i386
            asset_mime: application/octet-stream
          - target: osx-x64
            asset_mime: application/octet-stream
          - target: windows-x64
            asset_mime: application/vnd.microsoft.portable-executable
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ASSET_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/deploy-freva-${{matrix.target}}
          asset_name: deploy-freva-${{ matrix.target }}
          asset_content_type: ${{matrix.asset_mime}}
